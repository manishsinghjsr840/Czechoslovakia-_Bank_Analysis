-- Create the database
CREATE OR REPLACE DATABASE BANK;
USE DATABASE BANK;

-- Create tables
CREATE OR REPLACE TABLE DISTRICT (
    District_Code INT PRIMARY KEY,
    District_Name VARCHAR(100),
    Region VARCHAR(100),
    No_of_inhabitants INT,
    No_of_municipalities_with_inhabitants_less_499 INT,
    No_of_municipalities_with_inhabitants_500_btw_1999 INT,
    No_of_municipalities_with_inhabitants_2000_btw_9999 INT,
    No_of_municipalities_with_inhabitants_less_10000 INT,
    No_of_cities INT,
    Ratio_of_urban_inhabitants FLOAT,
    Average_salary INT,
    No_of_entrepreneurs_per_1000_inhabitants INT,
    No_committed_crime_2017 INT,
    No_committed_crime_2018 INT
);

CREATE OR REPLACE TABLE ACCOUNT (
    account_id INT PRIMARY KEY,
    district_id INT,
    frequency VARCHAR(40),
    Date DATE,
    Account_type VARCHAR(40),
    Card_Assigned VARCHAR(20),
    FOREIGN KEY (district_id) REFERENCES DISTRICT(District_Code)
);


CREATE OR REPLACE TABLE "ORDER" (
    order_id INT PRIMARY KEY,
    account_id INT,
    bank_to VARCHAR(45),
    account_to INT,
    amount FLOAT,
    FOREIGN KEY (account_id) REFERENCES ACCOUNT(account_id)
);

CREATE OR REPLACE TABLE LOAN (
    loan_id INT PRIMARY KEY,
    account_id INT,
    Date DATE,
    amount INT,
    duration INT,
    payments INT,
    status VARCHAR(35),
    FOREIGN KEY (account_id) REFERENCES ACCOUNT(account_id)
);

CREATE OR REPLACE TABLE TRANSACTIONS (
    trans_id INT PRIMARY KEY,
    account_id INT,
    Date DATE,
    Type VARCHAR(30),
    operation VARCHAR(40),
    amount INT,
    balance FLOAT,
    Purpose VARCHAR(40),
    bank VARCHAR(45),
    account INT,
    FOREIGN KEY (account_id) REFERENCES ACCOUNT(account_id)
);

CREATE OR REPLACE TABLE CLIENT (
    client_id INT PRIMARY KEY,
    Sex CHAR(10),
    Birth_date DATE,
    district_id INT,
    FOREIGN KEY (district_id) REFERENCES DISTRICT(District_Code)
);

CREATE OR REPLACE TABLE DISPOSITION (
    disp_id INT PRIMARY KEY,
    client_id INT,
    account_id INT,
    type CHAR(15),
    FOREIGN KEY (account_id) REFERENCES ACCOUNT(account_id),
    FOREIGN KEY (client_id) REFERENCES CLIENT(client_id)
);

CREATE OR REPLACE TABLE CARD (
    card_id INT PRIMARY KEY,
    disp_id INT,
    type CHAR(10),
    issued DATE,
    FOREIGN KEY (disp_id) REFERENCES DISPOSITION(disp_id)
);

-- Create storage integration
CREATE OR REPLACE STORAGE INTEGRATION AWS_INTEGRATION
TYPE = EXTERNAL_STAGE 
STORAGE_PROVIDER = S3
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::946557333348:role/banking_role'
ENABLED = TRUE
STORAGE_ALLOWED_LOCATIONS = ('s3://mybank01/');

-- Describe the integration to verify
DESCRIBE INTEGRATION AWS_INTEGRATION;

-- Create stage
CREATE OR REPLACE STAGE my_s3_stage
STORAGE_INTEGRATION = AWS_INTEGRATION
URL = 's3://mybank01/'
FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY='"' SKIP_HEADER = 1);

-- Show stages to verify
SHOW STAGES;

-- Create Snowpipes
CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT
AUTO_INGEST = TRUE
AS
COPY INTO  ACCOUNT
FROM @my_s3_stage/Account
FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY = '"' SKIP_HEADER = 1);



CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT
AUTO_INGEST = TRUE
AS
COPY INTO DISTRICT
FROM @my_s3_stage/District
FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY='"' SKIP_HEADER = 1);

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISPOSITION
AUTO_INGEST = TRUE
AS
COPY INTO DISPOSITION
FROM @my_s3_stage/Disp
FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY='"' SKIP_HEADER = 1);

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD
AUTO_INGEST = TRUE
AS
COPY INTO CARD
FROM @my_s3_stage/Card
FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY='"' SKIP_HEADER = 1);

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT
AUTO_INGEST = TRUE
AS
COPY INTO CLIENT
FROM @my_s3_stage/Client
FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY='"' SKIP_HEADER = 1);

CREATE OR REPLACE PIPE BANK_SNOWPIPE_TRANSACTIONS
AUTO_INGEST = TRUE
AS
COPY INTO TRANSACTIONS
FROM @my_s3_stage/Tranx
FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY='"' SKIP_HEADER = 1);

CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN
AUTO_INGEST = TRUE
AS
COPY INTO LOAN
FROM @my_s3_stage/Loan
FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY='"' SKIP_HEADER = 1);

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDER
AUTO_INGEST = TRUE
AS
COPY INTO "ORDER"
FROM @my_s3_stage/Order
FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY='"' SKIP_HEADER = 1);

-- Show pipes to verify
SHOW PIPES;

LIST @my_s3_stage/Account;


-- Refresh the pipe manually (optional)
ALTER PIPE BANK_SNOWPIPE_ACCOUNT REFRESH;
ALTER PIPE BANK_SNOWPIPE_DISTRICT REFRESH;
ALTER PIPE BANK_SNOWPIPE_DISPOSITION REFRESH;
ALTER PIPE BANK_SNOWPIPE_CLIENT REFRESH;
ALTER PIPE BANK_SNOWPIPE_TRANSACTIONS REFRESH;
ALTER PIPE BANK_SNOWPIPE_CARD REFRESH;
ALTER PIPE BANK_SNOWPIPE_LOAN REFRESH;
ALTER PIPE BANK_SNOWPIPE_ORDER REFRESH;

-- Test data insertion
SELECT * FROM ACCOUNT;
SELECT * FROM LOAN;
SELECT * FROM CLIENT;
SELECT * FROM DISTRICT;
SELECT * FROM DISPOSITION;
SELECT * FROM "ORDER";
SELECT * FROM transactions;
SELECT * FROM card;





SELECT DISTINCT(YEAR(DATE)) FROM TRANSACTIONS ORDER BY 1;

SELECT DATEADD(YEAR,1,DATE) FROM TRANSACTIONS WHERE YEAR(DATE)=2021;

-- UPDATE TRANSACTIONS 
-- SET DATE=DATEADD(YEAR,1,DATE)
-- WHERE YEAR(DATE)=2021;

-- UPDATE TRANSACTIONS 
-- SET DATE=DATEADD(YEAR,1,DATE)
-- WHERE YEAR(DATE)=2020;

-- UPDATE TRANSACTIONS 
-- SET DATE=DATEADD(YEAR,1,DATE)
-- WHERE YEAR(DATE)=2019;

-- UPDATE TRANSACTIONS 
-- SET DATE=DATEADD(YEAR,1,DATE)
-- WHERE YEAR(DATE)=2018;

-- UPDATE TRANSACTIONS 
-- SET DATE=DATEADD(YEAR,1,DATE)
-- WHERE YEAR(DATE)=2017;

-- UPDATE TRANSACTIONS 
-- SET DATE=DATEADD(YEAR,1,DATE)
-- WHERE YEAR(DATE)=2016;


UPDATE  TRANSACTIONS 
SET BANK= 'Sky Bank' where bank is  null and year(date)=2022;

UPDATE  TRANSACTIONS
SET BANK= 'DBS BANK' where bank is  null and year(date)=2021;

UPDATE  TRANSACTIONS
SET BANK= 'Northern Bank' where bank is  null and year(date)=2019;

UPDATE  TRANSACTIONS
SET BANK= 'Southern Bank' where bank is  null and year(date)=2018;


UPDATE  TRANSACTIONS
SET BANK= 'ADB Bank' where bank is  null and year(date)=2017;




-- UPDATE card
-- SET issued=dateadd(year,1,issued);

SELECT distinct(year(ISSUED)) from card;

SELECT * FROM ACCOUNT;
SELECT * FROM LOAN;
SELECT * FROM CLIENT;
SELECT * FROM DISTRICT;
SELECT * FROM DISPOSITION;
SELECT * FROM "ORDER";
SELECT * FROM transactions ;
SELECT * FROM card;


ALTER TABLE CLIENT
ADD COLUMN AGE INT;

UPDATE CLIENT
SET AGE= DATEDIFF(YEAR,BIRTH_DATE,CURRENT_DATE());



--Ad-hoc analysis 
--What is the demographic profile of the bank's clients and how does it vary across
--districts?
SELECT
    D.DISTRICT_CODE,
    D.DISTRICT_NAME,
    D.AVERAGE_SALARY,
    ROUND(AVG(C.AGE)) AS AVG_AGE,
    SUM(CASE WHEN C.SEX = 'Male' THEN 1 ELSE 0 END) AS NO_OF_MALE,
     SUM(CASE WHEN C.SEX = 'Female' THEN 1 ELSE 0 END) AS NO_OF_FEMALE,COUNT(C.*)AS TOTAL_CLIENT
FROM
    DISTRICT D
INNER JOIN
    CLIENT C
ON
    D.DISTRICT_CODE = C.DISTRICT_ID
GROUP BY
    D.DISTRICT_CODE,
    D.DISTRICT_NAME,
    D.AVERAGE_SALARY
ORDER BY
    D.DISTRICT_CODE;


-- 2. How the banks have performed over the years. Give their detailed analysis year &
-- month-wise.
CREATE OR REPLACE TABLE BANKING_KPI AS 
SELECT T.BANK, COUNT(DISTINCT T.account_id) NO_OF_CUSTOMER ,SUM(B.BALANCE) TOTAL_BALANCE,B.MONTH,B.YEAR FROM TRANSACTIONS T INNER JOIN 
BALANCE_KPI B ON B.ACCOUNT_ID=T.ACCOUNT_ID GROUP BY T.BANK,B.MONTH,B.YEAR ORDER BY TOTAL_BALANCE,YEAR;







--CREATING A TABLE WITH LATEST TRAN BALANCE MONTH WISE FOR EACH CUSTOMER


CREATE OR REPLACE TABLE  BALANCE_KPI AS 

WITH LastDayTransactions AS (
    SELECT 
        ACCOUNT_ID,
        YEAR(DATE) AS Year,
        MONTH(DATE) AS Month,
        MAX(DATE) AS MaxDate
    FROM 
        TRANSACTIONS
    WHERE 
        TYPE = 'Credit'
    GROUP BY 
        ACCOUNT_ID, 
        YEAR(DATE), 
        MONTH(DATE)
)
SELECT 
    t.ACCOUNT_ID, 
    ldt.Year, 
    ldt.Month, 
    MAX(t.BALANCE) AS balance, 
    ldt.MaxDate
FROM 
    TRANSACTIONS t
JOIN 
    LastDayTransactions ldt 
ON 
    t.ACCOUNT_ID = ldt.ACCOUNT_ID 
    AND t.DATE = ldt.MaxDate
 GROUP BY 1,2,3,5

ORDER BY 
    t.ACCOUNT_ID, 
    ldt.Year, 
    ldt.Month;

SELECT * FROM BALANCE_KPI;




-3--What are the most common types of accounts and how do they differ in terms of usage and profitability?
SELECT * FROM ACCOUNT ORDER BY ACCOUNT_ID;

 SELECT SUM(CASE WHEN ACCOUNT_TYPE='Savings account' THEN 1 ELSE 0 END )AS SAVING_ACCOUNT,SUM(CASE WHEN ACCOUNT_TYPE='Salary account' THEN 1 ELSE 0 END )AS SALARY_ACCOUNT,SUM(CASE WHEN ACCOUNT_TYPE='NRI account' THEN 1 ELSE 0 END )AS NRI_ACCOUNT ,COUNT(ACCOUNT_TYPE) TOTAL_ACCOUNT
 FROM ACCOUNT;

--AS ABOUVE WHEN CAN SEE THE THE MOST NO OF ACCOUNT IS SAVING ACCOUNT THEN NRI AND FOLLOWED BY TOTAL_ACCOUNT
SELECT * FROM LOAN;

WITH NPA_PERCENTAGE AS (
SELECT A.ACCOUNT_TYPE,L.STATUS,(L.AMOUNT),
CASE WHEN STATUS='Loan not payed' THEN AMOUNT ELSE 0 END AS NPA_AMOUNT
FROM 
ACCOUNT A INNER JOIN LOAN AS L
ON A.ACCOUNT_ID=L.ACCOUNT_ID)
SELECT ACCOUNT_TYPE ,SUM(AMOUNT) TOTAL_LOAN_AMOUNT ,SUM(NPA_AMOUNT) AS TOTAL_NPA_AMOUNT,ROUND((TOTAL_NPA_AMOUNT/TOTAL_LOAN_AMOUNT)*100,2) AS NPA_PERCENTAGE FROM NPA_PERCENTAGE
 GROUP BY 1;

--FROM ABOVE RESULT IT IS CLEAR THAT NRI ACCOUNT HAS MINIMUM NPA AND THE LOAN AMOUNT IS APPROXIMATE SAME IN ALL TYPE OF ACCOUNT SO IT CLEAR THAT NRI ACCOUNT IS MORE PROFITABLE AND LESS RISKY 


--4. Which types of cards are most frequently used by the bank's clients ?
SELECT * FROM card;

SELECT SUM( CASE WHEN TYPE='Gold' THEN 1 ELSE 0 END )AS TOTAL_NO_OF_GOLD_ISSUED,
SUM( CASE WHEN TYPE='Silver' THEN 1 ELSE 0 END )AS TOTAL_NO_OF_SILVER_ISSUED,
SUM( CASE WHEN TYPE='Diamond' THEN 1 ELSE 0 END )AS TOTAL_NO_OF_DIAMOND_ISSUED,COUNT(TYPE) TOTAL_CARD
FROM CARD;







